// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  name          String
  phone_number  String
  address       String
  refresh_token String?
  role          Role    @default(WORKER)
  department_id Int

  username String? @unique
  password String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Department Department @relation(fields: [department_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  Plans            Plans[]
  RecommendPlan    RecommendPlan[]
  SpecialAsset     SpecialAsset[]
  LiquidationAsset LiquidationAsset[]
}

model Supplier {
  id           Int      @id @default(autoincrement())
  name         String
  phone_number String
  email        String   @unique
  address      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Asset        Asset[]
}

model Asset {
  id                Int            @id @default(autoincrement())
  name              String
  // description   String
  asset_code        String
  depreciation_rate Float          @default(0)
  entry_time        DateTime
  entry_price       Int
  supplier_id       Int
  department_id     Int?
  status            StatusAsset
  condition         ConditionAsset
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt

  Supplier         Supplier           @relation(fields: [supplier_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Department       Department?        @relation(fields: [department_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  LiquidationAsset LiquidationAsset[]
}

model Department {
  id      Int    @id @default(autoincrement())
  name    String
  address String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User[]
  Asset      Asset[]

  // AssetDepartment AssetDepartment[]
  Plans Plans[]
}

model Plans {
  id                Int        @id @default(autoincrement())
  implemention_date DateTime
  petition_date     DateTime
  description_plan  String
  type              TypePlan
  status            StatusPlan
  evaluation        String

  department_id Int?
  user_id       Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Department Department? @relation(fields: [department_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User       User?       @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  PlanAsset  PlanAsset[]
}

model PlanAsset {
  id            Int         @id @default(autoincrement())
  plan_id       Int
  asset_name    String
  supplier_name String
  status        StatusAsset

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Plans Plans @relation(fields: [plan_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model RecommendPlan {
  id                Int        @id @default(autoincrement())
  implemention_date DateTime
  petition_date     DateTime
  description_plan  String
  type              TypePlan
  status            StatusPlan
  evaluation        String
  user_id           Int
  quantity          Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User               User                 @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  RecommendPlanAsset RecommendPlanAsset[]
}

model RecommendPlanAsset {
  id               Int         @id @default(autoincrement())
  recommed_plan_id Int
  asset_name       String
  supplier_name    String
  status           StatusAsset

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  RecommendPlan RecommendPlan @relation(fields: [recommed_plan_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SpecialAsset {
  id                  Int        @id @default(autoincrement())
  name                String
  quantity            Int
  type_of_vehicle     String
  purpose_use         String
  status              StatusPlan
  car_manufacturer    String
  manufacture_country String
  user_id             Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model LiquidationAsset {
  id                    Int        @id @default(autoincrement())
  implemention_date     DateTime
  petition_date         DateTime
  description_plan      String
  type                  TypePlan
  status                StatusPlan
  evaluation            String
  quantity              Int
  original_price        Int
  liquidation_price     Int
  asset_purchasing_unit String
  user_id               Int
  asset_id              Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User  User  @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Asset Asset @relation(fields: [asset_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model BuidingRental {
  id                 Int      @id @default(autoincrement())
  name               String
  location_room      String
  size_room          Float
  renter_information String?
  rental_date_start  DateTime
  rental_date_end    DateTime
  rental_price       Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  ADMIN
  WORKER
  MANAGER
}

enum StatusAsset {
  USED
  READY_TO_USE
  MAINTENANCE
}

enum StatusPlan {
  PENDING
  APPROVED
  REJECTED
}

enum ConditionAsset {
  GOOD
  BAD
  BROKEN
}

enum TypePlan {
  MAINTENANCE
  SHOPPING
}
